import unittest
from meu_grafo_lista_adj import *
from bibgrafo.grafo_errors import *
from bibgrafo.aresta import Aresta


class TestGrafo(unittest.TestCase):

    def setUp(self):
        # Grafo da Paraíba
        self.g_p = MeuGrafo()
        self.g_p.adiciona_vertice("J")
        self.g_p.adiciona_vertice("C")
        self.g_p.adiciona_vertice("E")
        self.g_p.adiciona_vertice("P")
        self.g_p.adiciona_vertice("M")
        self.g_p.adiciona_vertice("T")
        self.g_p.adiciona_vertice("Z")
        self.g_p.adiciona_aresta('a1', 'J', 'C')
        self.g_p.adiciona_aresta('a2', 'C', 'E')
        self.g_p.adiciona_aresta('a3', 'C', 'E')
        self.g_p.adiciona_aresta('a4', 'P', 'C')
        self.g_p.adiciona_aresta('a5', 'P', 'C')
        self.g_p.adiciona_aresta('a6', 'T', 'C')
        self.g_p.adiciona_aresta('a7', 'M', 'C')
        self.g_p.adiciona_aresta('a8', 'M', 'T')
        self.g_p.adiciona_aresta('a9', 'T', 'Z')

        # Clone do Grafo da Paraíba para ver se o método equals está funcionando
        self.g_p2 = MeuGrafo()
        self.g_p2.adiciona_vertice("J")
        self.g_p2.adiciona_vertice("C")
        self.g_p2.adiciona_vertice("E")
        self.g_p2.adiciona_vertice("P")
        self.g_p2.adiciona_vertice("M")
        self.g_p2.adiciona_vertice("T")
        self.g_p2.adiciona_vertice("Z")
        self.g_p2.adiciona_aresta('a1', 'J', 'C')
        self.g_p2.adiciona_aresta('a2', 'C', 'E')
        self.g_p2.adiciona_aresta('a3', 'C', 'E')
        self.g_p2.adiciona_aresta('a4', 'P', 'C')
        self.g_p2.adiciona_aresta('a5', 'P', 'C')
        self.g_p2.adiciona_aresta('a6', 'T', 'C')
        self.g_p2.adiciona_aresta('a7', 'M', 'C')
        self.g_p2.adiciona_aresta('a8', 'M', 'T')
        self.g_p2.adiciona_aresta('a9', 'T', 'Z')

        # Outro clone do Grafo da Paraíba para ver se o método equals está funcionando
        # Esse tem um pequena diferença na primeira aresta
        self.g_p3 = MeuGrafo()
        self.g_p3.adiciona_vertice("J")
        self.g_p3.adiciona_vertice("C")
        self.g_p3.adiciona_vertice("E")
        self.g_p3.adiciona_vertice("P")
        self.g_p3.adiciona_vertice("M")
        self.g_p3.adiciona_vertice("T")
        self.g_p3.adiciona_vertice("Z")
        self.g_p3.adiciona_aresta('a', 'J', 'C')
        self.g_p3.adiciona_aresta('a2', 'C', 'E')
        self.g_p3.adiciona_aresta('a3', 'C', 'E')
        self.g_p3.adiciona_aresta('a4', 'P', 'C')
        self.g_p3.adiciona_aresta('a5', 'P', 'C')
        self.g_p3.adiciona_aresta('a6', 'T', 'C')
        self.g_p3.adiciona_aresta('a7', 'M', 'C')
        self.g_p3.adiciona_aresta('a8', 'M', 'T')
        self.g_p3.adiciona_aresta('a9', 'T', 'Z')

        # Outro clone do Grafo da Paraíba para ver se o método equals está funcionando
        # Esse tem um pequena diferença na segunda aresta
        self.g_p4 = MeuGrafo()
        self.g_p4.adiciona_vertice("J")
        self.g_p4.adiciona_vertice("C")
        self.g_p4.adiciona_vertice("E")
        self.g_p4.adiciona_vertice("P")
        self.g_p4.adiciona_vertice("M")
        self.g_p4.adiciona_vertice("T")
        self.g_p4.adiciona_vertice("Z")
        self.g_p4.adiciona_aresta('a1', 'J', 'C')
        self.g_p4.adiciona_aresta('a2', 'J', 'E')
        self.g_p4.adiciona_aresta('a3', 'C', 'E')
        self.g_p4.adiciona_aresta('a4', 'P', 'C')
        self.g_p4.adiciona_aresta('a5', 'P', 'C')
        self.g_p4.adiciona_aresta('a6', 'T', 'C')
        self.g_p4.adiciona_aresta('a7', 'M', 'C')
        self.g_p4.adiciona_aresta('a8', 'M', 'T')
        self.g_p4.adiciona_aresta('a9', 'T', 'Z')

        # Grafo da Paraíba sem arestas paralelas
        self.g_p_sem_paralelas = MeuGrafo()
        self.g_p_sem_paralelas.adiciona_vertice("J")
        self.g_p_sem_paralelas.adiciona_vertice("C")
        self.g_p_sem_paralelas.adiciona_vertice("E")
        self.g_p_sem_paralelas.adiciona_vertice("P")
        self.g_p_sem_paralelas.adiciona_vertice("M")
        self.g_p_sem_paralelas.adiciona_vertice("T")
        self.g_p_sem_paralelas.adiciona_vertice("Z")
        self.g_p_sem_paralelas.adiciona_aresta('a1', 'J', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a2', 'C', 'E')
        self.g_p_sem_paralelas.adiciona_aresta('a3', 'P', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a4', 'T', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a5', 'M', 'C')
        self.g_p_sem_paralelas.adiciona_aresta('a6', 'M', 'T')
        self.g_p_sem_paralelas.adiciona_aresta('a7', 'T', 'Z')

        # Grafos completos
        self.g_c = MeuGrafo()
        self.g_c.adiciona_vertice("J")
        self.g_c.adiciona_vertice("C")
        self.g_c.adiciona_vertice("E")
        self.g_c.adiciona_vertice("P")
        self.g_c.adiciona_aresta('a1', 'J', 'C')
        self.g_c.adiciona_aresta('a2', 'J', 'E')
        self.g_c.adiciona_aresta('a3', 'J', 'P')
        self.g_c.adiciona_aresta('a4', 'E', 'C')
        self.g_c.adiciona_aresta('a5', 'P', 'C')
        self.g_c.adiciona_aresta('a6', 'P', 'E')

        self.g_c2 = MeuGrafo()
        self.g_c2.adiciona_vertice("Nina")
        self.g_c2.adiciona_vertice("Maria")
        self.g_c2.adiciona_aresta('amiga', 'Nina', 'Maria')

        self.g_c3 = MeuGrafo()
        self.g_c3.adiciona_vertice("Único")

        # Grafos com laco
        self.g_l1 = MeuGrafo()
        self.g_l1.adiciona_vertice("A")
        self.g_l1.adiciona_vertice("B")
        self.g_l1.adiciona_vertice("C")
        self.g_l1.adiciona_vertice("D")
        self.g_l1.adiciona_aresta('a1', 'A', 'A')
        self.g_l1.adiciona_aresta('a2', 'A', 'B')
        self.g_l1.adiciona_aresta('a3', 'A', 'A')

        self.g_l2 = MeuGrafo()
        self.g_l2.adiciona_vertice("A")
        self.g_l2.adiciona_vertice("B")
        self.g_l2.adiciona_vertice("C")
        self.g_l2.adiciona_vertice("D")
        self.g_l2.adiciona_aresta('a1', 'A', 'B')
        self.g_l2.adiciona_aresta('a2', 'B', 'B')
        self.g_l2.adiciona_aresta('a3', 'B', 'A')

        self.g_l3 = MeuGrafo()
        self.g_l3.adiciona_vertice("A")
        self.g_l3.adiciona_vertice("B")
        self.g_l3.adiciona_vertice("C")
        self.g_l3.adiciona_vertice("D")
        self.g_l3.adiciona_aresta('a1', 'C', 'A')
        self.g_l3.adiciona_aresta('a2', 'C', 'C')
        self.g_l3.adiciona_aresta('a3', 'D', 'D')
        self.g_l3.adiciona_aresta('a4', 'D', 'D')

        self.g_l4 = MeuGrafo()
        self.g_l4.adiciona_vertice("D")
        self.g_l4.adiciona_aresta('a1', 'D', 'D')

        self.g_l5 = MeuGrafo()
        self.g_l5.adiciona_vertice("C")
        self.g_l5.adiciona_vertice("D")
        self.g_l5.adiciona_aresta('a1', 'D', 'C')
        self.g_l5.adiciona_aresta('a2', 'C', 'C')

        # Grafos desconexos
        self.g_d = MeuGrafo()
        self.g_d.adiciona_vertice("A")
        self.g_d.adiciona_vertice("B")
        self.g_d.adiciona_vertice("C")
        self.g_d.adiciona_vertice("D")
        self.g_d.adiciona_aresta('asd', 'A', 'B')

        self.g_d2 = MeuGrafo()
        self.g_d2.adiciona_vertice("A")
        self.g_d2.adiciona_vertice("B")
        self.g_d2.adiciona_vertice("C")
        self.g_d2.adiciona_vertice("D")

        # Grafos para testar o método dfs e bfs
        self.g1_dfs_bfs = MeuGrafo()
        self.g1_dfs_bfs.adiciona_vertice("A")
        self.g1_dfs_bfs.adiciona_vertice("B")
        self.g1_dfs_bfs.adiciona_vertice("C")
        self.g1_dfs_bfs.adiciona_vertice("D")
        self.g1_dfs_bfs.adiciona_vertice("E")
        self.g1_dfs_bfs.adiciona_vertice("F")
        self.g1_dfs_bfs.adiciona_vertice("G")
        self.g1_dfs_bfs.adiciona_vertice("H")
        self.g1_dfs_bfs.adiciona_vertice("I")
        self.g1_dfs_bfs.adiciona_vertice("J")
        self.g1_dfs_bfs.adiciona_vertice("K")
        self.g1_dfs_bfs.adiciona_aresta("1", "A", "B")
        self.g1_dfs_bfs.adiciona_aresta("2", "A", "G")
        self.g1_dfs_bfs.adiciona_aresta("3", "A", "J")
        self.g1_dfs_bfs.adiciona_aresta("4", "K", "G")
        self.g1_dfs_bfs.adiciona_aresta("5", "K", "J")
        self.g1_dfs_bfs.adiciona_aresta("6", "J", "G")
        self.g1_dfs_bfs.adiciona_aresta("7", "J", "I")
        self.g1_dfs_bfs.adiciona_aresta("8", "I", "G")
        self.g1_dfs_bfs.adiciona_aresta("9", "G", "H")
        self.g1_dfs_bfs.adiciona_aresta("10", "F", "H")
        self.g1_dfs_bfs.adiciona_aresta("11", "B", "F")
        self.g1_dfs_bfs.adiciona_aresta("12", "B", "G")
        self.g1_dfs_bfs.adiciona_aresta("13", "B", "C")
        self.g1_dfs_bfs.adiciona_aresta("14", "C", "D")
        self.g1_dfs_bfs.adiciona_aresta("15", "D", "E")
        self.g1_dfs_bfs.adiciona_aresta("16", "B", "D")
        self.g1_dfs_bfs.adiciona_aresta("17", "B", "E")

        self.g1_r_dfs = MeuGrafo()
        self.g1_r_dfs.adiciona_vertice("A")
        self.g1_r_dfs.adiciona_vertice("B")
        self.g1_r_dfs.adiciona_vertice("C")
        self.g1_r_dfs.adiciona_vertice("D")
        self.g1_r_dfs.adiciona_vertice("E")
        self.g1_r_dfs.adiciona_vertice("F")
        self.g1_r_dfs.adiciona_vertice("G")
        self.g1_r_dfs.adiciona_vertice("H")
        self.g1_r_dfs.adiciona_vertice("I")
        self.g1_r_dfs.adiciona_vertice("J")
        self.g1_r_dfs.adiciona_vertice("K")
        self.g1_r_dfs.adiciona_aresta("4", "K", "G")
        self.g1_r_dfs.adiciona_aresta("12", "G", "B")
        self.g1_r_dfs.adiciona_aresta("1", "B", "A")
        self.g1_r_dfs.adiciona_aresta("3", "A", "J")
        self.g1_r_dfs.adiciona_aresta("7", "J", "I")
        self.g1_r_dfs.adiciona_aresta("11", "B", "F")
        self.g1_r_dfs.adiciona_aresta("10", "F", "H")
        self.g1_r_dfs.adiciona_aresta("13", "B", "C")
        self.g1_r_dfs.adiciona_aresta("14", "C", "D")
        self.g1_r_dfs.adiciona_aresta("15", "D", "E")

        self.g_p_dfs = MeuGrafo()
        self.g_p_dfs.adiciona_vertice("J")
        self.g_p_dfs.adiciona_vertice("C")
        self.g_p_dfs.adiciona_vertice("E")
        self.g_p_dfs.adiciona_vertice("P")
        self.g_p_dfs.adiciona_vertice("M")
        self.g_p_dfs.adiciona_vertice("T")
        self.g_p_dfs.adiciona_vertice("Z")
        self.g_p_dfs.adiciona_aresta("a1", "J", "C")
        self.g_p_dfs.adiciona_aresta("a2", "C", "E")
        self.g_p_dfs.adiciona_aresta("a4", "C", "P")
        self.g_p_dfs.adiciona_aresta("a6", "C", "T")
        self.g_p_dfs.adiciona_aresta("a8", "M", "T")
        self.g_p_dfs.adiciona_aresta("a9", "T", "Z")

        self.g_c_dfs = MeuGrafo()
        self.g_c_dfs.adiciona_vertice("J")
        self.g_c_dfs.adiciona_vertice("C")
        self.g_c_dfs.adiciona_vertice("E")
        self.g_c_dfs.adiciona_vertice("P")
        self.g_c_dfs.adiciona_aresta("a1", "J", "C")
        self.g_c_dfs.adiciona_aresta("a4", "C", "E")
        self.g_c_dfs.adiciona_aresta("a6", "E", "P")

        self.g_l1_dfs = MeuGrafo()
        self.g_l1_dfs.adiciona_vertice("A")
        self.g_l1_dfs.adiciona_vertice("B")
        self.g_l1_dfs.adiciona_aresta("a2", "A", "B")

        self.g_d_dfs = MeuGrafo()
        self.g_d_dfs.adiciona_vertice("A")
        self.g_d_dfs.adiciona_vertice("B")
        self.g_d_dfs.adiciona_aresta("asd", "A", "B")

        self.g1_r_bfs = MeuGrafo()
        self.g1_r_bfs.adiciona_vertice("A")
        self.g1_r_bfs.adiciona_vertice("B")
        self.g1_r_bfs.adiciona_vertice("C")
        self.g1_r_bfs.adiciona_vertice("D")
        self.g1_r_bfs.adiciona_vertice("E")
        self.g1_r_bfs.adiciona_vertice("F")
        self.g1_r_bfs.adiciona_vertice("G")
        self.g1_r_bfs.adiciona_vertice("H")
        self.g1_r_bfs.adiciona_vertice("I")
        self.g1_r_bfs.adiciona_vertice("J")
        self.g1_r_bfs.adiciona_vertice("K")
        self.g1_r_bfs.adiciona_aresta("4", "K", "G")
        self.g1_r_bfs.adiciona_aresta("5", "K", "J")
        self.g1_r_bfs.adiciona_aresta("12", "G", "B")
        self.g1_r_bfs.adiciona_aresta("2", "G", "A")
        self.g1_r_bfs.adiciona_aresta("8", "G", "I")
        self.g1_r_bfs.adiciona_aresta("9", "G", "H")
        self.g1_r_bfs.adiciona_aresta("11", "B", "F")
        self.g1_r_bfs.adiciona_aresta("13", "B", "C")
        self.g1_r_bfs.adiciona_aresta("16", "B", "D")
        self.g1_r_bfs.adiciona_aresta("17", "B", "E")

        self.g_p_bfs = MeuGrafo()
        self.g_p_bfs.adiciona_vertice("J")
        self.g_p_bfs.adiciona_vertice("C")
        self.g_p_bfs.adiciona_vertice("E")
        self.g_p_bfs.adiciona_vertice("P")
        self.g_p_bfs.adiciona_vertice("M")
        self.g_p_bfs.adiciona_vertice("T")
        self.g_p_bfs.adiciona_vertice("Z")
        self.g_p_bfs.adiciona_aresta("a1", "J", "C")
        self.g_p_bfs.adiciona_aresta("a2", "C", "E")
        self.g_p_bfs.adiciona_aresta("a4", "C", "P")
        self.g_p_bfs.adiciona_aresta("a6", "C", "T")
        self.g_p_bfs.adiciona_aresta("a7", "C", "M")
        self.g_p_bfs.adiciona_aresta("a9", "T", "Z")

        self.g_c_bfs = MeuGrafo()
        self.g_c_bfs.adiciona_vertice("J")
        self.g_c_bfs.adiciona_vertice("C")
        self.g_c_bfs.adiciona_vertice("E")
        self.g_c_bfs.adiciona_vertice("P")
        self.g_c_bfs.adiciona_aresta("a1", "J", "C")
        self.g_c_bfs.adiciona_aresta("a2", "J", "E")
        self.g_c_bfs.adiciona_aresta("a3", "J", "P")

        self.g_l1_bfs = MeuGrafo()
        self.g_l1_bfs.adiciona_vertice("A")
        self.g_l1_bfs.adiciona_vertice("B")
        self.g_l1_bfs.adiciona_aresta("a2", "A", "B")

        self.g_d_bfs = MeuGrafo()
        self.g_d_bfs.adiciona_vertice("A")
        self.g_d_bfs.adiciona_vertice("B")
        self.g_d_bfs.adiciona_aresta("asd", "A", "B")

        # Grafo cíclico
        self.g_ciclico = MeuGrafo()
        self.g_ciclico.adiciona_vertice("A")
        self.g_ciclico.adiciona_vertice("B")
        self.g_ciclico.adiciona_vertice("C")

        self.g_ciclico.adiciona_aresta("a1", "A", "B")
        self.g_ciclico.adiciona_aresta("a2", "B", "C")
        self.g_ciclico.adiciona_aresta("a3", "C", "A")

        # Grafos para testar o algoritmo de prim e kruskal

        self.p_k_1 = MeuGrafo()
        self.p_k_1.adiciona_vertice('A')
        self.p_k_1.adiciona_vertice('B')
        self.p_k_1.adiciona_vertice('C')
        self.p_k_1.adiciona_vertice('D')
        self.p_k_1.adiciona_vertice('E')

        self.p_k_1.adiciona_aresta('a1', 'A', 'B', 1)
        self.p_k_1.adiciona_aresta('a2', 'A', 'C', 2)
        self.p_k_1.adiciona_aresta('a3', 'B', 'C', 5)
        self.p_k_1.adiciona_aresta('a4', 'B', 'D', 3)
        self.p_k_1.adiciona_aresta('a5', 'D', 'E', 2)
        self.p_k_1.adiciona_aresta('a6', 'E', 'C', 4)
        self.p_k_1.adiciona_aresta('a7', 'E', 'A', 3)
        self.p_k_1.adiciona_aresta('a8', 'D', 'A', 2)

        self.p_k_2 = MeuGrafo()
        self.p_k_2.adiciona_vertice('A')
        self.p_k_2.adiciona_vertice('B')
        self.p_k_2.adiciona_vertice('C')
        self.p_k_2.adiciona_vertice('D')
        self.p_k_2.adiciona_vertice('E')
        self.p_k_2.adiciona_vertice('F')
        self.p_k_2.adiciona_vertice('G')
        self.p_k_2.adiciona_vertice('H')

        self.p_k_2.adiciona_aresta('a1', 'A', 'B', 4)
        self.p_k_2.adiciona_aresta('a2', 'B', 'C', 1)
        self.p_k_2.adiciona_aresta('a3', 'C', 'D', 2)
        self.p_k_2.adiciona_aresta('a4', 'A', 'D', 3)
        self.p_k_2.adiciona_aresta('a5', 'D', 'E', 2)
        self.p_k_2.adiciona_aresta('a6', 'D', 'F', 1)
        self.p_k_2.adiciona_aresta('a7', 'D', 'G', 1)
        self.p_k_2.adiciona_aresta('a8', 'G', 'H', 2)

        self.p_k_3 = MeuGrafo()
        self.p_k_3.adiciona_vertice('A')
        self.p_k_3.adiciona_vertice('B')
        self.p_k_3.adiciona_vertice('C')
        self.p_k_3.adiciona_vertice('D')
        self.p_k_3.adiciona_vertice('E')
        self.p_k_3.adiciona_vertice('F')
        self.p_k_3.adiciona_vertice('G')
        self.p_k_3.adiciona_vertice('H')

        self.p_k_3.adiciona_aresta('a1', 'A', 'C', 3)
        self.p_k_3.adiciona_aresta('a2', 'A', 'B', 1)
        self.p_k_3.adiciona_aresta('a3', 'A', 'D', 1)
        self.p_k_3.adiciona_aresta('a4', 'A', 'E', 1)
        self.p_k_3.adiciona_aresta('a5', 'A', 'F', 5)
        self.p_k_3.adiciona_aresta('a6', 'A', 'G', 2)
        self.p_k_3.adiciona_aresta('a7', 'F', 'E', 3)
        self.p_k_3.adiciona_aresta('a8', 'E', 'D', 3)
        self.p_k_3.adiciona_aresta('a9', 'D', 'B', 2)
        self.p_k_3.adiciona_aresta('a10', 'B', 'C', 4)
        self.p_k_3.adiciona_aresta('a11', 'C', 'G', 5)
        self.p_k_3.adiciona_aresta('a12', 'G', 'H', 1)

        self.p_k_4 = MeuGrafo()
        self.p_k_4.adiciona_vertice('A')
        self.p_k_4.adiciona_vertice('B')
        self.p_k_4.adiciona_vertice('C')
        self.p_k_4.adiciona_vertice('D')
        self.p_k_4.adiciona_vertice('E')
        self.p_k_4.adiciona_vertice('F')

        self.p_k_4.adiciona_aresta('a1', 'A', 'B', 6)
        self.p_k_4.adiciona_aresta('a2', 'A', 'D', 5)
        self.p_k_4.adiciona_aresta('a3', 'A', 'C', 1)
        self.p_k_4.adiciona_aresta('a4', 'B', 'C', 2)
        self.p_k_4.adiciona_aresta('a5', 'C', 'D', 2)
        self.p_k_4.adiciona_aresta('a6', 'D', 'F', 4)
        self.p_k_4.adiciona_aresta('a7', 'C', 'F', 4)
        self.p_k_4.adiciona_aresta('a8', 'C', 'E', 6)
        self.p_k_4.adiciona_aresta('a9', 'B', 'E', 5)
        self.p_k_4.adiciona_aresta('a10', 'E', 'F', 3)

        self.p_k_5 = MeuGrafo()
        self.p_k_5.adiciona_vertice('A')
        self.p_k_5.adiciona_vertice('B')
        self.p_k_5.adiciona_vertice('C')
        self.p_k_5.adiciona_vertice('D')

        self.p_k_5.adiciona_aresta('a1', 'A', 'B', 1)
        self.p_k_5.adiciona_aresta('a2', 'C', 'D', 1)
        self.p_k_5.adiciona_aresta('a3', 'A', 'C', 2)
        self.p_k_5.adiciona_aresta('a4', 'B', 'D', 3)

        self.p_k_6 = MeuGrafo()
        self.p_k_6.adiciona_vertice('J')
        self.p_k_6.adiciona_vertice('K')
        self.p_k_6.adiciona_vertice('L')
        self.p_k_6.adiciona_vertice('M')
        self.p_k_6.adiciona_vertice('N')

        self.p_k_6.adiciona_aresta('a1', 'J', 'K', 1)
        self.p_k_6.adiciona_aresta('a2', 'J', 'L', 2)
        self.p_k_6.adiciona_aresta('a3', 'J', 'M', 3)
        self.p_k_6.adiciona_aresta('a4', 'J', 'N', 4)
        self.p_k_6.adiciona_aresta('a5', 'K', 'L', 5)
        self.p_k_6.adiciona_aresta('a6', 'K', 'M', 6)
        self.p_k_6.adiciona_aresta('a7', 'K', 'N', 7)
        self.p_k_6.adiciona_aresta('a8', 'L', 'M', 8)
        self.p_k_6.adiciona_aresta('a9', 'L', 'N', 9)

        self.p_k_7 = MeuGrafo()
        self.p_k_7.adiciona_vertice('A')
        self.p_k_7.adiciona_vertice('B')
        self.p_k_7.adiciona_vertice('C')
        self.p_k_7.adiciona_vertice('D')
        self.p_k_7.adiciona_vertice('E')
        self.p_k_7.adiciona_vertice('F')

        self.p_k_7.adiciona_aresta('a1', 'A', 'B', 7)
        self.p_k_7.adiciona_aresta('a2', 'A', 'C', 8)
        self.p_k_7.adiciona_aresta('a3', 'B', 'C', 3)
        self.p_k_7.adiciona_aresta('a4', 'B', 'D', 5)
        self.p_k_7.adiciona_aresta('a5', 'C', 'D', 6)
        self.p_k_7.adiciona_aresta('a6', 'C', 'E', 3)
        self.p_k_7.adiciona_aresta('a7', 'C', 'E', 6)
        self.p_k_7.adiciona_aresta('a8', 'D', 'E', 2)
        self.p_k_7.adiciona_aresta('a9', 'D', 'F', 4)
        self.p_k_7.adiciona_aresta('a10', 'E', 'F', 2)
        self.p_k_7.adiciona_aresta('a11', 'D', 'D', 1)

        #Grafos resposta para testar o algorithm de prim

        self.prim_1_resp = MeuGrafo()
        self.prim_1_resp.adiciona_vertice('A')
        self.prim_1_resp.adiciona_vertice('B')
        self.prim_1_resp.adiciona_vertice('C')
        self.prim_1_resp.adiciona_vertice('D')
        self.prim_1_resp.adiciona_vertice('E')

        self.prim_1_resp.adiciona_aresta('a1', 'A', 'B', 1)
        self.prim_1_resp.adiciona_aresta('a4', 'B', 'D', 3)
        self.prim_1_resp.adiciona_aresta('a5', 'D', 'E', 2)
        self.prim_1_resp.adiciona_aresta('a6', 'E', 'C', 4)

        self.prim_2_resp = MeuGrafo()
        self.prim_2_resp.adiciona_vertice('A')
        self.prim_2_resp.adiciona_vertice('B')
        self.prim_2_resp.adiciona_vertice('C')
        self.prim_2_resp.adiciona_vertice('D')
        self.prim_2_resp.adiciona_vertice('E')
        self.prim_2_resp.adiciona_vertice('F')
        self.prim_2_resp.adiciona_vertice('G')
        self.prim_2_resp.adiciona_vertice('H')

        self.prim_2_resp.adiciona_aresta('a4', 'A', 'D', 3)
        self.prim_2_resp.adiciona_aresta('a3', 'C', 'D', 2)
        self.prim_2_resp.adiciona_aresta('a5', 'D', 'E', 2)
        self.prim_2_resp.adiciona_aresta('a2', 'B', 'C', 1)
        self.prim_2_resp.adiciona_aresta('a6', 'D', 'F', 1)
        self.prim_2_resp.adiciona_aresta('a7', 'D', 'G', 1)
        self.prim_2_resp.adiciona_aresta('a8', 'G', 'H', 2)

        self.prim_3_resp = MeuGrafo()
        self.prim_3_resp.adiciona_vertice('A')
        self.prim_3_resp.adiciona_vertice('B')
        self.prim_3_resp.adiciona_vertice('C')
        self.prim_3_resp.adiciona_vertice('D')
        self.prim_3_resp.adiciona_vertice('E')
        self.prim_3_resp.adiciona_vertice('F')
        self.prim_3_resp.adiciona_vertice('G')
        self.prim_3_resp.adiciona_vertice('H')

        self.prim_3_resp.adiciona_aresta('a2', 'A', 'B', 1)
        self.prim_3_resp.adiciona_aresta('a9', 'D', 'B', 2)
        self.prim_3_resp.adiciona_aresta('a8', 'E', 'D', 3)
        self.prim_3_resp.adiciona_aresta('a7', 'F', 'E', 3)
        self.prim_3_resp.adiciona_aresta('a10', 'B', 'C', 4)
        self.prim_3_resp.adiciona_aresta('a11', 'C', 'G', 5)
        self.prim_3_resp.adiciona_aresta('a12', 'G', 'H', 1)

        self.prim_4_resp = MeuGrafo()
        self.prim_4_resp.adiciona_vertice('A')
        self.prim_4_resp.adiciona_vertice('B')
        self.prim_4_resp.adiciona_vertice('C')
        self.prim_4_resp.adiciona_vertice('D')
        self.prim_4_resp.adiciona_vertice('E')
        self.prim_4_resp.adiciona_vertice('F')

        self.prim_4_resp.adiciona_aresta('a3', 'A', 'C', 1)
        self.prim_4_resp.adiciona_aresta('a4', 'B', 'C', 2)
        self.prim_4_resp.adiciona_aresta('a9', 'B', 'E', 5)
        self.prim_4_resp.adiciona_aresta('a10', 'E', 'F', 3)
        self.prim_4_resp.adiciona_aresta('a6', 'D', 'F', 4)

        self.prim_5_resp = MeuGrafo()
        self.prim_5_resp.adiciona_vertice('A')
        self.prim_5_resp.adiciona_vertice('B')
        self.prim_5_resp.adiciona_vertice('C')
        self.prim_5_resp.adiciona_vertice('D')

        self.prim_5_resp.adiciona_aresta('a1', 'A', 'B', 1)
        self.prim_5_resp.adiciona_aresta('a4', 'B', 'D', 3)
        self.prim_5_resp.adiciona_aresta('a2', 'C', 'D', 1)

        self.prim_6_resp = MeuGrafo()
        self.prim_6_resp.adiciona_vertice('J')
        self.prim_6_resp.adiciona_vertice('K')
        self.prim_6_resp.adiciona_vertice('L')
        self.prim_6_resp.adiciona_vertice('M')
        self.prim_6_resp.adiciona_vertice('N')

        self.prim_6_resp.adiciona_aresta('a1', 'J', 'K', 1)
        self.prim_6_resp.adiciona_aresta('a5', 'K', 'L', 5)
        self.prim_6_resp.adiciona_aresta('a8', 'L', 'M', 8)
        self.prim_6_resp.adiciona_aresta('a9', 'L', 'N', 9)

        self.prim_7_resp = MeuGrafo()
        self.prim_7_resp.adiciona_vertice('A')
        self.prim_7_resp.adiciona_vertice('B')
        self.prim_7_resp.adiciona_vertice('C')
        self.prim_7_resp.adiciona_vertice('D')
        self.prim_7_resp.adiciona_vertice('E')
        self.prim_7_resp.adiciona_vertice('F')

        self.prim_7_resp.adiciona_aresta('a8', 'D', 'E', 2)
        self.prim_7_resp.adiciona_aresta('a10', 'E', 'F', 2)
        self.prim_7_resp.adiciona_aresta('a6', 'C', 'E', 3)
        self.prim_7_resp.adiciona_aresta('a3', 'B', 'C', 3)
        self.prim_7_resp.adiciona_aresta('a1', 'A', 'B', 7)

        #Grafos resposta para testar o algorithm de kruskal

        self.kruskal_1_resp = MeuGrafo()
        self.kruskal_1_resp.adiciona_vertice('A')
        self.kruskal_1_resp.adiciona_vertice('B')
        self.kruskal_1_resp.adiciona_vertice('C')
        self.kruskal_1_resp.adiciona_vertice('D')
        self.kruskal_1_resp.adiciona_vertice('E')

        self.kruskal_1_resp.adiciona_aresta('a1', 'A', 'B', 1)
        self.kruskal_1_resp.adiciona_aresta('a2', 'A', 'C', 2)
        self.kruskal_1_resp.adiciona_aresta('a5', 'D', 'E', 2)
        self.kruskal_1_resp.adiciona_aresta('a8', 'D', 'A', 2)

        self.kruskal_2_resp = MeuGrafo()
        self.kruskal_2_resp.adiciona_vertice('A')
        self.kruskal_2_resp.adiciona_vertice('B')
        self.kruskal_2_resp.adiciona_vertice('C')
        self.kruskal_2_resp.adiciona_vertice('D')
        self.kruskal_2_resp.adiciona_vertice('E')
        self.kruskal_2_resp.adiciona_vertice('F')
        self.kruskal_2_resp.adiciona_vertice('G')
        self.kruskal_2_resp.adiciona_vertice('H')

        self.kruskal_2_resp.adiciona_aresta('a2', 'B', 'C', 1)
        self.kruskal_2_resp.adiciona_aresta('a6', 'D', 'F', 1)
        self.kruskal_2_resp.adiciona_aresta('a7', 'D', 'G', 1)
        self.kruskal_2_resp.adiciona_aresta('a3', 'C', 'D', 2)
        self.kruskal_2_resp.adiciona_aresta('a5', 'D', 'E', 2)
        self.kruskal_2_resp.adiciona_aresta('a8', 'G', 'H', 2)
        self.kruskal_2_resp.adiciona_aresta('a4', 'A', 'D', 3)

        self.kruskal_3_resp = MeuGrafo()
        self.kruskal_3_resp.adiciona_vertice('A')
        self.kruskal_3_resp.adiciona_vertice('B')
        self.kruskal_3_resp.adiciona_vertice('C')
        self.kruskal_3_resp.adiciona_vertice('D')
        self.kruskal_3_resp.adiciona_vertice('E')
        self.kruskal_3_resp.adiciona_vertice('F')
        self.kruskal_3_resp.adiciona_vertice('G')
        self.kruskal_3_resp.adiciona_vertice('H')

        self.kruskal_3_resp.adiciona_aresta('a12', 'G', 'H', 1)
        self.kruskal_3_resp.adiciona_aresta('a2', 'A', 'B', 1)
        self.kruskal_3_resp.adiciona_aresta('a3', 'A', 'D', 1)
        self.kruskal_3_resp.adiciona_aresta('a4', 'A', 'E', 1)
        self.kruskal_3_resp.adiciona_aresta('a6', 'A', 'G', 2)
        self.kruskal_3_resp.adiciona_aresta('a1', 'A', 'C', 3)
        self.kruskal_3_resp.adiciona_aresta('a7', 'F', 'E', 3)

        self.kruskal_4_resp = MeuGrafo()
        self.kruskal_4_resp.adiciona_vertice('A')
        self.kruskal_4_resp.adiciona_vertice('B')
        self.kruskal_4_resp.adiciona_vertice('C')
        self.kruskal_4_resp.adiciona_vertice('D')
        self.kruskal_4_resp.adiciona_vertice('E')
        self.kruskal_4_resp.adiciona_vertice('F')

        self.kruskal_4_resp.adiciona_aresta('a3', 'A', 'C', 1)
        self.kruskal_4_resp.adiciona_aresta('a4', 'B', 'C', 2)
        self.kruskal_4_resp.adiciona_aresta('a5', 'C', 'D', 2)
        self.kruskal_4_resp.adiciona_aresta('a10', 'E', 'F', 3)
        self.kruskal_4_resp.adiciona_aresta('a6', 'D', 'F', 4)

        self.kruskal_5_resp = MeuGrafo()
        self.kruskal_5_resp.adiciona_vertice('A')
        self.kruskal_5_resp.adiciona_vertice('B')
        self.kruskal_5_resp.adiciona_vertice('C')
        self.kruskal_5_resp.adiciona_vertice('D')

        self.kruskal_5_resp.adiciona_aresta('a1', 'A', 'B', 1)
        self.kruskal_5_resp.adiciona_aresta('a2', 'C', 'D', 1)
        self.kruskal_5_resp.adiciona_aresta('a3', 'A', 'C', 2)

        self.kruskal_6_resp = MeuGrafo()
        self.kruskal_6_resp.adiciona_vertice('J')
        self.kruskal_6_resp.adiciona_vertice('K')
        self.kruskal_6_resp.adiciona_vertice('L')
        self.kruskal_6_resp.adiciona_vertice('M')
        self.kruskal_6_resp.adiciona_vertice('N')

        self.kruskal_6_resp.adiciona_aresta('a1', 'J', 'K', 1)
        self.kruskal_6_resp.adiciona_aresta('a2', 'J', 'L', 2)
        self.kruskal_6_resp.adiciona_aresta('a3', 'J', 'M', 3)
        self.kruskal_6_resp.adiciona_aresta('a4', 'J', 'N', 4)

        self.kruskal_7_resp = MeuGrafo()
        self.kruskal_7_resp.adiciona_vertice('A')
        self.kruskal_7_resp.adiciona_vertice('B')
        self.kruskal_7_resp.adiciona_vertice('C')
        self.kruskal_7_resp.adiciona_vertice('D')
        self.kruskal_7_resp.adiciona_vertice('E')
        self.kruskal_7_resp.adiciona_vertice('F')

        self.kruskal_7_resp.adiciona_aresta('a10', 'E', 'F', 2)
        self.kruskal_7_resp.adiciona_aresta('a8', 'D', 'E', 2)
        self.kruskal_7_resp.adiciona_aresta('a3', 'B', 'C', 3)
        self.kruskal_7_resp.adiciona_aresta('a6', 'C', 'E', 3)
        self.kruskal_7_resp.adiciona_aresta('a1', 'A', 'B', 7)

    def test_adiciona_aresta(self):
        self.assertTrue(self.g_p.adiciona_aresta('a10', 'J', 'C'))
        a = Aresta("zxc", self.g_p.get_vertice("C"), self.g_p.get_vertice("Z"))
        self.assertTrue(self.g_p.adiciona_aresta(a))
        with self.assertRaises(ArestaInvalidaError):
            self.assertTrue(self.g_p.adiciona_aresta(a))
        with self.assertRaises(VerticeInvalidoError):
            self.assertTrue(self.g_p.adiciona_aresta('b1', '', 'C'))
        with self.assertRaises(VerticeInvalidoError):
            self.assertTrue(self.g_p.adiciona_aresta('b1', 'A', 'C'))
        with self.assertRaises(NotImplementedError):
            self.g_p.adiciona_aresta('')
        with self.assertRaises(NotImplementedError):
            self.g_p.adiciona_aresta('aa-bb')
        with self.assertRaises(VerticeInvalidoError):
            self.g_p.adiciona_aresta('x', 'J', 'V')
        with self.assertRaises(ArestaInvalidaError):
            self.g_p.adiciona_aresta('a1', 'J', 'C')

    def test_eq(self):
        self.assertEqual(self.g_p, self.g_p2)
        self.assertNotEqual(self.g_p, self.g_p3)
        self.assertNotEqual(self.g_p, self.g_p_sem_paralelas)
        self.assertNotEqual(self.g_p, self.g_p4)

    def test_vertices_nao_adjacentes(self):
        self.assertEqual(self.g_p.vertices_nao_adjacentes(),
                         {'J-E', 'J-P', 'J-M', 'J-T', 'J-Z', 'C-Z', 'E-P', 'E-M', 'E-T', 'E-Z', 'P-M', 'P-T', 'P-Z',
                          'M-Z'})
        self.assertEqual(self.g_d.vertices_nao_adjacentes(), {'A-C', 'A-D', 'B-C', 'B-D', 'C-D'})
        self.assertEqual(self.g_d2.vertices_nao_adjacentes(), {'A-B', 'A-C', 'A-D', 'B-C', 'B-D', 'C-D'})
        self.assertEqual(self.g_c.vertices_nao_adjacentes(), set())
        self.assertEqual(self.g_c3.vertices_nao_adjacentes(), set())

    def test_ha_laco(self):
        self.assertFalse(self.g_p.ha_laco())
        self.assertFalse(self.g_p2.ha_laco())
        self.assertFalse(self.g_p3.ha_laco())
        self.assertFalse(self.g_p4.ha_laco())
        self.assertFalse(self.g_p_sem_paralelas.ha_laco())
        self.assertFalse(self.g_d.ha_laco())
        self.assertFalse(self.g_c.ha_laco())
        self.assertFalse(self.g_c2.ha_laco())
        self.assertFalse(self.g_c3.ha_laco())
        self.assertTrue(self.g_l1.ha_laco())
        self.assertTrue(self.g_l2.ha_laco())
        self.assertTrue(self.g_l3.ha_laco())
        self.assertTrue(self.g_l4.ha_laco())
        self.assertTrue(self.g_l5.ha_laco())

    def test_grau(self):
        # Paraíba
        self.assertEqual(self.g_p.grau('J'), 1)
        self.assertEqual(self.g_p.grau('C'), 7)
        self.assertEqual(self.g_p.grau('E'), 2)
        self.assertEqual(self.g_p.grau('P'), 2)
        self.assertEqual(self.g_p.grau('M'), 2)
        self.assertEqual(self.g_p.grau('T'), 3)
        self.assertEqual(self.g_p.grau('Z'), 1)
        with self.assertRaises(VerticeInvalidoError):
            self.assertEqual(self.g_p.grau('G'), 5)

        self.assertEqual(self.g_d.grau('A'), 1)
        self.assertEqual(self.g_d.grau('C'), 0)
        self.assertNotEqual(self.g_d.grau('D'), 2)
        self.assertEqual(self.g_d2.grau('A'), 0)

        # Completos
        self.assertEqual(self.g_c.grau('J'), 3)
        self.assertEqual(self.g_c.grau('C'), 3)
        self.assertEqual(self.g_c.grau('E'), 3)
        self.assertEqual(self.g_c.grau('P'), 3)

        # Com laço. Lembrando que cada laço conta 2 vezes por vértice para cálculo do grau
        self.assertEqual(self.g_l1.grau('A'), 5)
        self.assertEqual(self.g_l2.grau('B'), 4)
        self.assertEqual(self.g_l4.grau('D'), 2)

    def test_ha_paralelas(self):
        self.assertTrue(self.g_p.ha_paralelas())
        self.assertFalse(self.g_p_sem_paralelas.ha_paralelas())
        self.assertFalse(self.g_c.ha_paralelas())
        self.assertFalse(self.g_c2.ha_paralelas())
        self.assertFalse(self.g_c3.ha_paralelas())
        self.assertTrue(self.g_l1.ha_paralelas())

    def test_arestas_sobre_vertice(self):
        self.assertEqual(self.g_p.arestas_sobre_vertice('J'), {'a1'})
        self.assertEqual(self.g_p.arestas_sobre_vertice('C'), {'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7'})
        self.assertEqual(self.g_p.arestas_sobre_vertice('M'), {'a7', 'a8'})
        self.assertEqual(self.g_l2.arestas_sobre_vertice('B'), {'a1', 'a2', 'a3'})
        self.assertEqual(self.g_d.arestas_sobre_vertice('C'), set())
        self.assertEqual(self.g_d.arestas_sobre_vertice('A'), {'asd'})
        with self.assertRaises(VerticeInvalidoError):
            self.g_p.arestas_sobre_vertice('A')

    def test_eh_completo(self):
        self.assertFalse(self.g_p.eh_completo())
        self.assertFalse((self.g_p_sem_paralelas.eh_completo()))
        self.assertTrue((self.g_c.eh_completo()))
        self.assertTrue((self.g_c2.eh_completo()))
        self.assertTrue((self.g_c3.eh_completo()))
        self.assertFalse((self.g_l1.eh_completo()))
        self.assertFalse((self.g_l2.eh_completo()))
        self.assertFalse((self.g_l3.eh_completo()))
        self.assertFalse((self.g_l4.eh_completo()))
        self.assertFalse((self.g_l5.eh_completo()))
        self.assertFalse((self.g_d.eh_completo()))
        self.assertFalse((self.g_d2.eh_completo()))

    def test_dfs(self):
        self.assertEqual(self.g_p.dfs('J'), self.g_p_dfs)
        self.assertEqual(self.g1_dfs_bfs.dfs('K'), self.g1_r_dfs)
        self.assertEqual(self.g_c.dfs('J'), self.g_c_dfs)
        self.assertEqual(self.g_l1.dfs('A'), self.g_l1_dfs)
        self.assertEqual(self.g_d.dfs('A'), self.g_d_dfs)

    def test_bfs(self):
        self.assertEqual(self.g_p.bfs('J'), self.g_p_bfs)
        self.assertEqual(self.g1_dfs_bfs.bfs('K'), self.g1_r_bfs)
        self.assertEqual(self.g_c.bfs('J'), self.g_c_bfs)
        self.assertEqual(self.g_l1.bfs('A'), self.g_l1_bfs)
        self.assertEqual(self.g_d.bfs('A'), self.g_d_bfs)

    def test_conexo(self):
        self.assertTrue(self.g_p.conexo())
        self.assertTrue(self.g_p_sem_paralelas.conexo())
        self.assertTrue(self.g_c.conexo())
        self.assertTrue(self.g_c2.conexo())
        self.assertTrue(self.g_c3.conexo())
        self.assertFalse(self.g_l1.conexo())
        self.assertFalse(self.g_l2.conexo())
        self.assertFalse(self.g_l3.conexo())
        self.assertTrue(self.g_l4.conexo())
        self.assertTrue(self.g_l5.conexo())
        self.assertFalse(self.g_d.conexo())
        self.assertFalse(self.g_d2.conexo())

    def test_ha_ciclo(self):
        self.assertEqual(self.g_p.ha_ciclo(), ['C', 'a2', 'E', 'a3', 'C'])
        self.assertEqual(self.g_l1.ha_ciclo(), ['A', 'a1', 'A'])
        self.assertEqual(self.g_c.ha_ciclo(), ['J', 'a1', 'C', 'a4', 'E', 'a2', 'J'])
        self.assertFalse(self.g_d.ha_ciclo())
        self.assertFalse(self.g_d2.ha_ciclo())
        self.assertEqual(self.g1_dfs_bfs.ha_ciclo(), ['A', '1', 'B', '11', 'F', '10', 'H', '9', 'G', '2', 'A'])
        self.assertEqual(self.g_ciclico.ha_ciclo(), ['A', 'a1', 'B', 'a2', 'C', 'a3', 'A'])

    def test_caminho(self):
        self.assertEqual(self.g_p.caminho(4), ['J', 'a1', 'C', 'a7', 'M', 'a8', 'T', 'a9', 'Z'])
        self.assertFalse(self.g_p.caminho(5))
        self.assertEqual(self.g_p3.caminho(3), ['J', 'a', 'C', 'a6', 'T', 'a8', 'M'])
        self.assertEqual(self.g_p3.caminho(4), ['J', 'a', 'C', 'a7', 'M', 'a8', 'T', 'a9', 'Z'])
        self.assertFalse(self.g_p3.caminho(5))
        self.assertFalse(self.g_d.caminho(5))
        self.assertEqual(self.g1_dfs_bfs.caminho(6), ['A', '1', 'B', '11', 'F', '10', 'H', '9', 'G', '4', 'K', '5', 'J'])
        self.assertEqual(self.g_c2.caminho(1), ['Nina', 'amiga', 'Maria'])
        self.assertFalse(self.g_c2.caminho(2))
        self.assertEqual(self.g_l1.caminho(1), ['A', 'a2', 'B'])
        self.assertFalse(self.g_l1.caminho(2))
        self.assertFalse(self.g_l4.caminho(1))
        self.assertEqual(self.g_ciclico.caminho(3), ['A', 'a1', 'B', 'a2', 'C', 'a3', 'A'])

    def test_prim(self):
        self.assertEqual(self.p_k_1.prim(), self.prim_1_resp)
        self.assertEqual(self.p_k_2.prim(), self.prim_2_resp)
        self.assertEqual(self.p_k_3.prim(), self.prim_3_resp)
        self.assertEqual(self.p_k_4.prim(), self.prim_4_resp)
        self.assertEqual(self.p_k_5.prim(), self.prim_5_resp)
        self.assertEqual(self.p_k_6.prim(), self.prim_6_resp)
        self.assertEqual(self.p_k_7.prim(), self.prim_7_resp)

    def test_kruskal(self):
        self.assertEqual(self.p_k_1.kruskal(), self.kruskal_1_resp)
        self.assertEqual(self.p_k_2.kruskal(), self.kruskal_2_resp)
        self.assertEqual(self.p_k_3.kruskal(), self.kruskal_3_resp)
        self.assertEqual(self.p_k_4.kruskal(), self.kruskal_4_resp)
        self.assertEqual(self.p_k_5.kruskal(), self.kruskal_5_resp)
        self.assertEqual(self.p_k_6.kruskal(), self.kruskal_6_resp)
        self.assertEqual(self.p_k_7.kruskal(), self.kruskal_7_resp)